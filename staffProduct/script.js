const sidebar = document.getElementById('sidebar');
const toggleSidebar = document.getElementById('toggle-sidebar');
const closeSidebar = document.getElementById('close-sidebar');
toggleSidebar.addEventListener('click', () => {
    sidebar.classList.toggle('show');
});

closeSidebar.addEventListener('click', () => {
    sidebar.classList.remove('show');
});
document.addEventListener('DOMContentLoaded', () => {
    checkroles();


    const addProductForm = document.getElementById("addProductForm");
    const productImageInput = document.getElementById("productImage");
    const previewImage = document.getElementById("previewImage");
    const closeModalButton = document.getElementById("closeModal");
    const addProductModal = document.getElementById("addProductModal");
    const Productcategory = document.getElementById("category");
    closeModalButton.addEventListener("click", function () {
    addProductModal.style.display = "none";
    });

    addProductForm.addEventListener("submit", async function (event) {
    event.preventDefault();

    const formData = new FormData();
    formData.append("name", document.getElementById("productName").value);
    formData.append("price", document.getElementById("price").value);
    formData.append("quantity", document.getElementById("quantity").value);
    formData.append("status", document.getElementById("status").value);
    formData.append("details", document.getElementById("details").value);
    formData.append("category", document.getElementById("category").value);
    if (productImageInput.files[0]) {
        formData.append("image", productImageInput.files[0]);
    }

    try {
        const response = await fetch("https://lestialv.ddns.net:3001/api/uploadproducts", {
            method: "POST",
            body: formData
        });

        if (response.ok) {
            window.location.reload();
            addProductModal.style.display = "none";
            addProductForm.reset();
            previewImage.style.display = "none";
        } else {
            Swal.fire({title:"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", icon:"warning"});
        }
    } catch (error) {
        console.error("Error:", error);
        Swal.fire({title:"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", icon:"error"});
    }

});

    });
    document.getElementById('productImage').addEventListener('change', function(event) {
    const file = event.target.files[0];
    if (file) {
    const reader = new FileReader();
    reader.onload = function(e) {
        const previewImage = document.getElementById('previewImage');
        previewImage.src = e.target.result;
        previewImage.style.display = "block"; // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
    };
    reader.readAsDataURL(file);
    }
    });
    document.getElementById('addProductButton').addEventListener('click', function() {
    document.getElementById('addProductModal').style.display = 'flex';
     });
    document.getElementById('closeModal').addEventListener('click', function() {
    document.getElementById('addProductModal').style.display = 'none';
    });
    
    function fetchProducts() {
        fetch('https://lestialv.ddns.net:3001/products')
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(products => {
                const tableBody = document.querySelector('#productTable tbody');
                tableBody.innerHTML = ''; // Clear current table content
    
                if (!Array.isArray(products)) {
                     console.error("Fetched data is not an array:", products);
                     // Handle error display if needed
                     return;
                }
    
                products.forEach(product => {
                    const row = document.createElement('tr');
                    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î data-id ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
                    row.dataset.productId = product.Product_id;
    
                    row.innerHTML = `
                        <td><input type="checkbox" class="productCheckbox" data-id="${product.Product_id}"></td>
                        <td>${product.Product_id}</td>
                        <td>
                            <div class="product-info">
                                <img src="../Server/${product.Product_img || 'placeholder.jpg'}" alt="${product.Product_name}" class="product-image" onerror="this.onerror=null;this.src='../Server/placeholder.jpg';"> ${product.Product_name}
                            </div>
                        </td>
                        <td>${product.Product_type}</td>
                        <td class="${product.Product_status === 'out-of-stock' ? 'status-out' : ''}">${product.Product_status}</td>
                        <td>${product.Product_price}</td>
                        <td>${product.Product_count}</td>
                        <td>
                            <button class="button button-icon edit-product-btn" data-id="${product.Product_id}" title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç">
                                <i class='bx bx-edit-alt'></i>
                            </button>
                            </td>
                    `;
                    tableBody.appendChild(row);
                });
            })
            .catch(error => {
                 console.error('Error fetching products:', error);
                 // Display error message to user, e.g., replace table body content
                 const tableBody = document.querySelector('#productTable tbody');
                 tableBody.innerHTML = `<tr><td colspan="8" style="text-align:center; color:red;">‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ: ${error.message}</td></tr>`;
            });
    }
 /*   document.addEventListener('click', function (event) {
if (event.target.classList.contains('product-image')) {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ checkbox ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    const checkbox = event.target.closest('tr')?.querySelector('.productCheckbox');

    if (!checkbox) {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö .productCheckbox");
        return;
    }

    const productId = checkbox.dataset.id; // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Product ID
    //console.log("üÜî Product ID:", productId);

    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/*';

    input.addEventListener('change', function () {
        const file = input.files[0];
        if (file) {
            const formData = new FormData();
            formData.append('image', file);
            formData.append('productId', productId);

            fetch('https://lestialv.ddns.net:3001/updateProductImage', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    event.target.src = `../Server/${data.newImage}`; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ
                } else {
                    alert('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                }
            })
            .catch(error => {
                console.error('Error updating image:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
            });
        }
    });

    input.click();
}
});*/

    // Delete selected products
    function deleteProducts() {
        const selectedCheckboxes = document.querySelectorAll('.productCheckbox:checked');
        const productIdsToDelete = Array.from(selectedCheckboxes).map(checkbox => checkbox.dataset.id);

        if (productIdsToDelete.length > 0) {
            Swal.fire({
                title: '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
                text: '‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ! ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
                icon: 'warning',
                input: 'text',
                inputPlaceholder: '‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"',
                showCancelButton: true,
                confirmButtonText: '‡∏•‡∏ö',
                cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
                preConfirm: (inputValue) => {
                    if (inputValue !== '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô') {
                        Swal.showValidationMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö');
                    }
                    return inputValue;
                }
            }).then((result) => {
                if (result.isConfirmed && result.value === '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô') {
                    fetch('https://lestialv.ddns.net:3001/deleteProducts', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ productIds: productIdsToDelete })
                    })
                    .then(response => response.json())
                    .then(data => {
                        fetchProducts(); // Re-fetch products to refresh the table
                        Swal.fire({title:'‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', icon:'success'}).then(() => {
                            window.location.reload(); // Reload the page to reflect changes
                        });
                    })
                    .catch(error => {
                        console.error('Error deleting products:', error);
                        Swal.fire({title:'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', icon:'error'});
                    });
                }
            });
        } else {
            Swal.fire({title:'‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', icon:'warning'});
        }
    }
    
function checkroles() {
    const userId = sessionStorage.getItem('userId') || localStorage.getItem('userId');
    fetch(`https://lestialv.ddns.net:3001/api/checkroles/${userId}`)
        .then(response => response.json())
        .then(user => {
            if (!user || !user.Roles) {
                window.location.href = '/login';
            }
            if (user.Roles === 'admin') {
                window.location.href = '/dashboard'; // Redirect to admin dashboard
            } else if (user.Roles === 'user') {
                window.location.href = '../profiles'; // Redirect to user profile
            }
             else if (user.Roles !== 'admin' && user.Roles !== 'user' && user.Roles !== 'staff') {
                window.location.href = '/login';
            }
        })
        .catch(error => console.error('Error fetching roles:', error));
}

    // Toggle select all checkboxes
    function toggleSelectAll(checkbox) {
        const checkboxes = document.querySelectorAll('.productCheckbox');
        checkboxes.forEach(cb => cb.checked = checkbox.checked);
    }

    // Initialize the table on page load
    function editCell(cell, columnName, productId) {
const oldValue = cell.innerText;
const input = document.createElement('input');
input.type = 'text';
input.value = oldValue;
input.onblur = function () {
    updateProduct(productId, columnName, input.value, cell, oldValue);
};
input.onkeydown = function (event) {
    if (event.key === 'Enter') {
        input.blur();
    } else if (event.key === 'Escape') {
        cell.innerText = oldValue;
    }
};
cell.innerHTML = '';
cell.appendChild(input);
input.focus();
}
// --- ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° Edit (‡πÉ‡∏ä‡πâ Event Delegation) ---
const productTableBody = document.querySelector('#productTable tbody');
productTableBody.addEventListener('click', (event) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ element ‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠ parent ‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const editButton = event.target.closest('.edit-product-btn');
    if (editButton) {
        const productId = editButton.dataset.id;
        openEditModal(productId);
    }
});

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Edit Modal ---
async function openEditModal(productId) {
    
    const modal = document.getElementById('editProductModal');
    const form = document.getElementById('editProductForm');
    const previewImage = document.getElementById('editPreviewImage');

    try {
        // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ä‡∏¥‡πâ‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÜ ‡∏à‡∏≤‡∏Å Backend
        const response = await fetch(`https://lestialv.ddns.net:3001/products/${productId}`);
        if (!response.ok) {
            throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ID ${productId} ‡πÑ‡∏î‡πâ`);
        }
        const product = await response.json();
        //console.log('Fetched product:', product); // Log the fetched product for debugging
        if (!product) {
             throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ID ${productId}`);
        }

        // 2. ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
        document.getElementById('editProductId').value = product.Product_id || ''; // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å
        document.getElementById('editProductName').value = product.Product_name || ''; // ‡πÉ‡∏ä‡πâ || '' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô undefined
        document.getElementById('editPrice').value = product.Product_price || '';
        document.getElementById('editQuantity').value = product.Product_count || '';
        document.getElementById('editCategory').value = product.Product_type || '';
        document.getElementById('editStatus').value = product.Product_status || ''; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ value ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö DB
        document.getElementById('editDetails').value = product.Product_description || '';

        // 3. ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        if (product.Product_img) {
             previewImage.src = `../Server/${product.Product_img}`;
             previewImage.style.display = 'block';
        } else {
             previewImage.src = ''; // ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ placeholder
             previewImage.style.display = 'none';
        }
        // Reset file input (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏¥‡∏î modal ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
        document.getElementById('editProductImage').value = null;


        // 4. ‡πÅ‡∏™‡∏î‡∏á Modal
        modal.style.display = 'flex';

    } catch (error) {
        console.error('Error opening edit modal:', error);
        Swal.fire({title:`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ${error.message}`, icon:'error'});
    }
}

// --- ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î Edit Modal ---
document.getElementById('editCloseModal').addEventListener('click', function() {
    document.getElementById('editProductModal').style.display = 'none';
});

// --- ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Submit ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
document.getElementById('editProductForm').addEventListener('submit', async function(event) {
    event.preventDefault(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà

    const productId = document.getElementById('editProductId').value;
    const imageFile = document.getElementById('editProductImage').files[0]; // ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    //console.log(`Selected file: ${imageFile ? imageFile.name : 'No file selected'}`); // Log the selected file name
    // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏õ‡πá‡∏ô FormData ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ
    const formData = new FormData();
    formData.append('productId', productId); // ‡∏™‡πà‡∏á ID ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ (‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô URL ‡∏Ç‡∏≠‡∏á PUT ‡∏Å‡πá‡∏ï‡∏≤‡∏°)
    formData.append('userId', sessionStorage.getItem('userId')); // ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    formData.append('Product_name', document.getElementById('editProductName').value);
    formData.append('Product_price', document.getElementById('editPrice').value);
    formData.append('Product_count', document.getElementById('editQuantity').value);
    formData.append('Product_type', document.getElementById('editCategory').value);
    formData.append('Product_status', document.getElementById('editStatus').value);
    formData.append('Product_description', document.getElementById('editDetails').value);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÉ‡∏ô FormData ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if (imageFile) {
        formData.append('productImage', imageFile); // ‡∏ä‡∏∑‡πà‡∏≠ field ‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà backend (multer) ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
    }

    //console.log(`Submitting edit for product ID: ${productId}`);
    // Log FormData content (for debugging, files won't show directly)
    for (let [key, value] of formData.entries()) {
        //console.log(`${key}: ${value}`);
    }


    try {
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡πà Backend (‡πÉ‡∏ä‡πâ PUT ‡∏´‡∏£‡∏∑‡∏≠ POST ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà Backend ‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
        // ‡πÉ‡∏ä‡πâ PUT ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á ID ‡πÉ‡∏ô URL ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô RESTful ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤
        const response = await fetch(`https://lestialv.ddns.net:3001/products/${productId}`, {
            method: 'PUT', // ‡∏´‡∏£‡∏∑‡∏≠ 'POST' ‡∏ñ‡πâ‡∏≤ endpoint ‡πÄ‡∏õ‡πá‡∏ô /products/update
            body: formData // ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô FormData (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á Content-Type header ‡πÄ‡∏≠‡∏á)
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({ message: 'Unknown error updating product' })); //‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô error ‡∏à‡∏≤‡∏Å json
             throw new Error(`HTTP error! status: ${response.status} - ${errorData.message || 'Failed to update'}`);
        }

        const result = await response.json();
        //console.log('Update result:', result);

        // ‡∏õ‡∏¥‡∏î Modal
        document.getElementById('editProductModal').style.display = 'none';

        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        fetchProducts();

        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (Optional)
        Swal.fire({title:'‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!', icon:'success'});

    } catch (error) {
        console.error('Error updating product:', error);
        Swal.fire({title:`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${error.message}`, icon:'error'});
    }
});

// --- Preview ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Edit Modal ---
document.getElementById('editProductImage').addEventListener('change', function(event) {
    const file = event.target.files[0];
    const previewImage = document.getElementById('editPreviewImage');
    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            previewImage.src = e.target.result;
            previewImage.style.display = "block";
        };
        reader.readAsDataURL(file);
    } else {
         // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏´‡∏£‡∏∑‡∏≠‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡πÄ‡∏•‡∏¢
         // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á src ‡πÄ‡∏î‡∏¥‡∏°‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏ï‡πà‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏Ñ‡πà‡∏ã‡πà‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå
         // previewImage.src = 'URL ‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°'; // ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏Å‡πá‡∏ö URL ‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ
         // previewImage.style.display = 'block';
         // ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
          previewImage.style.display = 'none';
          previewImage.src = '';
    }
});


// --- ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏Å fetchProducts() ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ ---
document.addEventListener('DOMContentLoaded', fetchProducts);

function updateProduct(productId, columnName, newValue, cell, oldValue) {
fetch(`https://lestialv.ddns.net:3001/updateProduct`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ productId, columnName, newValue })
})
.then(response => response.json())
.then(data => {
    if (data.success) {
        cell.innerText = newValue;
    } else {
        cell.innerText = oldValue;
        Swal.fire({title:'‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ',icon: 'error'});
    }
})
.catch(error => {
    console.error('Error updating product:', error);
    cell.innerText = oldValue;
    Swal.fire({title:'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà', icon:'error'});
});
}

    document.addEventListener('DOMContentLoaded', fetchProducts);
    function logout() {
        localStorage.removeItem('currentUser');
    localStorage.removeItem('token');
    sessionStorage.removeItem('currentUser');
    sessionStorage.removeItem('token');
    sessionStorage.removeItem('userId');
    localStorage.removeItem('userId');
    localStorage.removeItem('favorites');
    sessionStorage.clear();
    localStorage.clear();
        // Reset current user
        currentUser = null;
        window.location.href = "../login/";
    }
    document.querySelector('.search-input').addEventListener('input', function () {
        const query = this.value.trim();
        const tbody = document.querySelector('#productTable tbody');
    
        if (!query) {
            // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡πà‡∏≤‡∏á
            loadAllProducts();
            return;
        }
    
        fetch(`https://lestialv.ddns.net:3001/api/search?q=${encodeURIComponent(query)}`)
            .then(res => res.json())
            .then(data => {
                tbody.innerHTML = '';
    
                if (data.length === 0) {
                    tbody.innerHTML = `<tr><td colspan="7" style="text-align:center;">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</td></tr>`;
                    return;
                }
    
                data.forEach(product => {
                    const row = document.createElement('tr');
                    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î data-id ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
                    row.dataset.productId = product.Product_id;
    
                    row.innerHTML = `
                        <td><input type="checkbox" class="productCheckbox" data-id="${product.Product_id}"></td>
                        <td>${product.Product_id}</td>
                        <td>
                            <div class="product-info">
                                <img src="../Server/${product.Product_img || 'placeholder.jpg'}" alt="${product.Product_name}" class="product-image" onerror="this.onerror=null;this.src='../Server/placeholder.jpg';"> ${product.Product_name}
                            </div>
                        </td>
                        <td>${product.Product_type}</td>
                        <td class="${product.Product_status === 'out-of-stock' ? 'status-out' : ''}">${product.Product_status}</td>
                        <td>${product.Product_price}</td>
                        <td>${product.Product_count}</td>
                        <td>
                            <button class="button button-icon edit-product-btn" data-id="${product.Product_id}" title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç">
                                <i class='bx bx-edit-alt'></i>
                            </button>
                            </td>
                    `;
                    tbody.appendChild(row);
                });
            })
            .catch(err => {
                console.error('‚ùå Error searching products:', err);
                tbody.innerHTML = `<tr><td colspan="7" style="text-align:center;">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</td></tr>`;
            });
    });
    
    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠ query ‡∏ß‡πà‡∏≤‡∏á
    function loadAllProducts() {
        fetch('https://lestialv.ddns.net:3001/products') // ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤ endpoint ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            .then(res => res.json())
            .then(data => {
                const tbody = document.querySelector('#productTable tbody');
                tbody.innerHTML = '';
    
                data.forEach(product => {
                    const row = document.createElement('tr');
                    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î data-id ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
                    row.dataset.productId = product.Product_id;
    
                    row.innerHTML = `
                        <td><input type="checkbox" class="productCheckbox" data-id="${product.Product_id}"></td>
                        <td>${product.Product_id}</td>
                        <td>
                            <div class="product-info">
                                <img src="../Server/${product.Product_img || 'placeholder.jpg'}" alt="${product.Product_name}" class="product-image" onerror="this.onerror=null;this.src='../Server/placeholder.jpg';"> ${product.Product_name}
                            </div>
                        </td>
                        <td>${product.Product_type}</td>
                        <td class="${product.Product_status === 'out-of-stock' ? 'status-out' : ''}">${product.Product_status}</td>
                        <td>${product.Product_price}</td>
                        <td>${product.Product_count}</td>
                        <td>
                            <button class="button button-icon edit-product-btn" data-id="${product.Product_id}" title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç">
                                <i class='bx bx-edit-alt'></i>
                            </button>
                            </td>
                    `;
                    tbody.appendChild(row);
                });
            })
            .catch(err => {
                console.error('‚ùå Error loading all products:', err);
            });
    }
    function home(){
        window.location.href = "/";
    }
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    window.addEventListener('DOMContentLoaded', loadAllProducts);